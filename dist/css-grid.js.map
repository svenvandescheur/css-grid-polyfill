{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 7c30a72d487de75ace66","webpack:///./src/index.js"],"names":["Polyfill","stylesheet","document","styleSheets","ast","createAST","apply","rules","map","call","Rule","css","filter","rule","isGridRelated","AST","console","log","containers","tree","forEach","node","container","position","style","toLowerCase","containerColumns","meta","columns","containerColumnCount","length","containerTotalWidth","clientWidth","containerGutterWidth","parseInt","colGap","containerGutterHeight","rowGap","containerTotalGutterWidth","containerColumnWidth","columnCursor","rowCursor","rowIndex","rowSpans","rows","item","index","itemColumnObject","width","itemColSpan","colSpan","itemWidth","gutters","Math","max","columnIndex","skipped","rSpan","rowSpan","skippedWidth","nextLeft","tallestColumn","getTallestRuleNode","clientHeight","push","left","top","row","column","rowsToCheck","guttersHeight","i","nextRow","height","scrollHeight","ruleNodes","reduce","acc","val","getRuleNodes","getContainerRules","getItemRules","buildTree","isDisplayGrid","ruleNode","nodes","rNodes","rNode","RuleNode","existing","rn","key","items","getItemRuleNodes","getContainerRuleNodes","indexOf","children","data","parseCSS","selector","querySelectorAll","addMeta","split","cssText","trim","replace","JSON","parse","addColumns","addGridArea","addGap","addSpan","match","property","span","keys","Object"],"mappings":"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","file":"css-grid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 7c30a72d487de75ace66","/**\n * Main polyfill class.\n * @class\n */\nclass Polyfill {\n    /**\n     * Constructor method.\n     */\n    constructor() {\n        this.stylesheet = document.styleSheets[0];\n        this.ast = this.createAST();\n        this.apply();\n    }\n\n    /**\n     * Converts this.stylesheets to an abstract syntax tree like object.\n     * Returned object is used by this.apply() to polyfill CSS grid behaviour.\n     * @returns {AST}\n     */\n    createAST() {\n        let rules = [].map.call(this.stylesheet.rules, (css => new Rule(css)))\n            .filter(rule => rule.isGridRelated());\n        return new AST(rules);\n    }\n\n    /**\n     * Builds the grid based on this.ast.\n     */\n    apply() {\n        console.log(this.ast);\n        let containers = this.ast.tree;\n\n\n        // Generates code based on AST branches.\n        // This loop takes care of containers.\n        containers.forEach(container => {\n            let node = container.node;\n\n            // Apply container styles.\n            let position = node.style.position.toLowerCase();\n            if (position === '' || position === 'static') {\n                node.style.position = 'relative';\n            }\n\n\n            // Container specific variables.\n            let containerColumns = container.rule.meta.columns;\n            let containerColumnCount = container.rule.meta.columns.length;\n            let containerTotalWidth = container.node.clientWidth;\n            let containerGutterWidth = (parseInt(container.rule.meta.colGap) || 0);\n            let containerGutterHeight = (parseInt(container.rule.meta.rowGap) || 0);\n            let containerTotalGutterWidth = containerGutterWidth * (containerColumnCount - 1);\n            let containerColumnWidth = (containerTotalWidth - containerTotalGutterWidth) / containerColumnCount;\n\n\n            // Cursors.\n            let columnCursor = 0;\n            let rowCursor = 0;\n            let rowIndex = 0;\n            let rowSpans = [];\n            let rows = [];\n\n\n            // Generates code based on AST leaves.\n            // This loop takes care of column placement.\n            container.tree.forEach((item, index) => {\n                // Item specific variables.\n                let itemColumnObject = containerColumns[index] || {width: 'auto'};\n                let itemColSpan = item.rule.meta.colSpan || 1;\n                let itemWidth;\n\n\n                // Calculate width.\n                if (itemColumnObject.width === 'auto') {\n                    let gutters = Math.max(itemColSpan - 1, 0) * containerGutterWidth;\n                    itemWidth = containerColumnWidth * itemColSpan + gutters;\n                } else {\n                    itemWidth = parseInt(itemColumnObject.width);\n                }\n\n\n                // Check if we need to continue to the next row.\n                let columnIndex = (rows[rowIndex]) ? rows[rowIndex].length : 0;\n                let skipped = rowSpans.filter(rSpan => rSpan.index === columnIndex && rSpan.rowSpan > 0)[0];\n                let skippedWidth = (skipped) ? skipped.itemWidth + containerGutterWidth : 0;\n                let nextLeft = columnCursor - containerGutterWidth + itemWidth + skippedWidth;\n\n                if (nextLeft > containerTotalWidth) {\n                    let tallestColumn = this.getTallestRuleNode(rows[rowIndex]).node.clientHeight;\n                    columnCursor = 0;\n                    rowCursor += tallestColumn + containerGutterHeight;\n                    rowIndex++;\n                }\n                if (skipped) {\n                    skipped.rowSpan--;\n                }\n\n\n                // Add item to row\n                if (!rows[rowIndex]) {\n                    rows[rowIndex] = [];\n                }\n                rows[rowIndex].push(item);\n\n\n                // Apply items styles.\n                item.node.style.position = 'absolute';\n                item.node.style.width = itemWidth + 'px';\n                item.node.style.left = columnCursor + 'px';\n                item.node.style.top = rowCursor + 'px';\n\n\n                // Update cursors.\n                columnCursor += item.node.clientWidth + containerGutterWidth;\n\n\n                // Rowspan\n                let rowSpan = Math.max(item.rule.meta.rowSpan - 1 || 0, 0);\n\n                if (rowSpan) {\n                    rowSpans.push({index, rowSpan, itemWidth});\n                }\n            });\n\n\n            // Generates code based on generated rows.\n            // This loop takes care of row span.\n            rows.forEach((row, rowIndex) => {\n                row.forEach((column) => {\n                    let rowsToCheck = Math.max(column.rule.meta.rowSpan - 1 || 0, 0);\n\n                    if (!rows[rowIndex + 1]) {\n                        return;\n                    }\n\n                    let guttersHeight = rowsToCheck * parseInt(container.rule.meta.rowGap);\n                    let clientHeight = column.node.clientHeight + guttersHeight;\n\n                    for (let i = 1; i <= rowsToCheck; i++) {\n                        let nextRow = rows[rowIndex + i];\n\n                        if (nextRow) {\n                            clientHeight += this.getTallestRuleNode(nextRow).node.clientHeight;\n                        }\n                    }\n                    column.node.style.height = clientHeight + 'px';\n                });\n\n\n            });\n\n\n            // Update the container height based on the contents.\n            container.node.style.height = container.node.scrollHeight + 'px';\n        });\n    }\n\n    getTallestRuleNode(ruleNodes) {\n        return ruleNodes.reduce((acc, val) => {\n            return (acc.node.clientHeight > val.node.clientHeight) ? acc : val;\n        }, ruleNodes[0]);\n    }\n}\n\n\n/**\n * Represents the Abstract Syntax Tree\n */\nclass AST {\n    /**\n     * Constructor method.\n     * @param {Rule} rules\n     */\n    constructor(rules) {\n        /** {Rules[]} */\n        this.rules = rules;\n\n        /** {RuleNode[] */\n        this.ruleNodes = [...this.getRuleNodes(this.getContainerRules()), ...this.getRuleNodes(this.getItemRules())];\n\n        this.tree = this.buildTree();\n\n\n    }\n\n    /**\n     * Returns the rules that describe grid containers (display: grid;).\n     * @returns {Rule[]}\n     */\n    getContainerRules() {\n        return this.rules.filter(rule => rule.isDisplayGrid());\n    }\n\n    /**\n     * Returns the rules that describe grid containers (display: grid;).\n     * @returns {Rule[]}\n     */\n    getContainerRuleNodes() {\n        return this.ruleNodes.filter(ruleNode => ruleNode.rule.isDisplayGrid());\n    }\n\n    /**\n     * Returns the rules that describe grid items.\n     * @returns {Rule[]}\n     */\n    getItemRules() {\n        return this.rules.filter(rule => !rule.isDisplayGrid());\n    }\n\n    /**\n     * Returns the rules that describe grid containers (display: grid;).\n     * @returns {Rule[]}\n     */\n    getItemRuleNodes() {\n        return this.ruleNodes.filter(ruleNode => !ruleNode.rule.isDisplayGrid());\n    }\n\n    /**\n     * Converts all nodes in all rules to RuleNode instances.\n     * @returns {RuleNode[]}\n     */\n    getRuleNodes(rules) {\n        let ruleNodes = [];\n\n        rules.forEach(rule => {\n            let nodes = rule.nodes;\n            let rNodes = [];\n\n            [].forEach.call(nodes, node => {\n                let rNode = new RuleNode(rule, node);\n                let existing = ruleNodes.filter(rn => rn.node === node)[0];\n                if (existing) {\n                    for (let key in rNode.rule.meta) {\n                        existing.rule.meta[key] = rNode.rule.meta[key];\n                    }\n                } else {\n                    ruleNodes.push(rNode);\n                }\n            });\n\n            rNodes.forEach(ruleNode => ruleNodes.push(ruleNode));\n        });\n        return ruleNodes;\n    }\n\n    /**\n     * Returns a nested tree of RuleNode instances.\n     */\n    buildTree() {\n        let items = this.getItemRuleNodes();\n        let containers = this.getContainerRuleNodes();\n\n        containers.forEach(container => {\n            container.tree = items.filter(item => {\n                return [].indexOf.call(container.node.children, item.node) > -1;\n            });\n        });\n\n        return containers;\n    }\n}\n\n\n/**\n * Combines a single (cloned) Rule matched to a single Node\n * @class\n */\nclass RuleNode {\n    /**\n     * Constructor method.\n     * @param {Rule} rule\n     * @param {HTMLElement} node\n     */\n    constructor(rule, node) {\n        /** {Rule} */\n        this.rule = new Rule(rule.css);\n\n        /** {HTMLElement} */\n        this.node = node;\n    }\n}\n\n\n/**\n * A parsed rule.\n * @class\n */\nclass Rule {\n    /**\n     * Constructor method.\n     * @param {string} css\n     */\n    constructor(css) {\n        let data = this.parseCSS(css);\n        this.css = css;\n        this.selector = data.selector;\n        this.nodes = document.querySelectorAll(this.selector);\n        this.rules = data.rules;\n        this.addMeta();\n    }\n\n    /**\n     * Parses a\n     * @param rule\n     * @returns {Rule}\n     */\n    parseCSS(rule) {\n        let split = rule.cssText.split('{');\n        let selector = split[0].trim();\n        let rules = split[1]\n            .replace(/([^:;]+)/g, '\"$1\"')\n            .replace(/;/g, ',')\n            .replace(/\\s*?\"\\s+?/g, '\"')\n            .replace(/,\"}\"$/g, '}');\n\n        rules = JSON.parse('{' + rules);\n\n        return {\n            selector,\n            rules\n        };\n    }\n\n    /**\n     * Adds meta key to this.\n     * Meta contains processed information about the this.rules.\n     */\n    addMeta() {\n        this.meta = {};\n        this.addColumns();\n        this.addGridArea();\n        this.addGap('grid-gap');\n        this.addGap('grid-column-gap');\n        this.addGap('grid-row-gap');\n        this.addSpan('grid-column');\n        this.addSpan('grid-row');\n    }\n\n    /**\n     * Parses \"grid-area\".\n     * Adds \"colSpan\" and \"rowSpan\" to meta.\n     */\n    addGridArea() {\n        let cssText = this.rules['grid-area'];\n        if (cssText) {\n            let split = cssText.match(/span\\s+?\\d+/g);\n\n            if (split[0]) {\n                this.meta.rowSpan = parseInt(split[0].match(/\\d+/));\n            }\n            if (split[1]) {\n                this.meta.colSpan = parseInt(split[1].match(/\\d+/));\n            }\n        }\n    }\n\n    /**\n     * Parses \"grid-template-columns\".\n     * Adds \"columns\" to meta.\n     */\n    addColumns() {\n        let cssText = this.rules['grid-template-columns'];\n        if (cssText) {\n            let columns = cssText\n                .replace(/\\[.+?\\]/g, '')\n                .trim()\n                .split(/\\s+/);\n\n            this.meta.columns = [];\n            for (let i = 0; i < columns.length; i++) {\n                this.meta.columns.push({width: columns[i]});\n            }\n        }\n    }\n\n    /**\n     * Parses \"grid-column-gap\", \"grid-row-gap\" and \"grid-gap\".\n     * Adds \"colGap\" and \"rowGap\" to meta.\n     * @param {string} property\n     */\n    addGap(property) {\n        let cssText = this.rules[property];\n\n        if (property === 'grid-gap' && cssText) {\n            let split = cssText.split(/\\s+/);\n\n            if (split[0]) {\n                this.meta.rowGap = split[0];\n            }\n            if (split[1]) {\n                this.meta.colGap = split[1];\n            }\n        }\n\n        else if (cssText) {\n            let key = (property.match('column') ? 'colGap' : 'rowGap');\n            this.meta[key] = cssText;\n        }\n    }\n\n    /**\n     * Parses \"grid-column\" and \"grid-row\".\n     * Adds \"colSpan\" and \"rowSpan\" to meta.\n     * @param {string} property\n     */\n    addSpan(property) {\n        let cssText = this.rules[property];\n        if (cssText) {\n            let span = cssText.match(/span\\s+?\\d+/g);\n            if (span) {\n                let key = (property.match('column') ? 'colSpan' : 'rowSpan');\n                this.meta[key] = span[0].match(/\\d+/)[0];\n            }\n        }\n    }\n\n    /**\n     * Returns whether this rule is a display: grid; statement.\n     * This can be used to filter the grid container/parent.\n     * @returns {boolean}\n     */\n    isDisplayGrid() {\n        let keys = Object.keys(this.rules)\n            .filter(key => key.toLowerCase().match(/grid-template/));\n        return keys.length > 0;\n    }\n\n    /**\n     * Returns whether this rule describes CSS grid behaviour.\n     * @returns {boolean}\n     */\n    isGridRelated() {\n        return this.isDisplayGrid() || !!Object.keys(this.rules)\n            .filter(key => key.match(/^grid/)).length;\n    }\n}\n\n\n// if(navigator.userAgent.toLowerCase().match('trident')) {\nnew Polyfill();\n// }\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js"],"sourceRoot":""}